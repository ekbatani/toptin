// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Toptin.Api.Data;

namespace Toptin.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Toptin.Api.Models.AttributeCategory", b =>
                {
                    b.Property<int>("AttributeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("AttributeCategoryId");

                    b.ToTable("AttributeCategory");
                });

            modelBuilder.Entity("Toptin.Api.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title");

                    b.HasKey("BrandId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Toptin.Api.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentCategoryId");

                    b.Property<bool>("Root");

                    b.Property<string>("Title");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Toptin.Api.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorNum");

                    b.Property<int>("KalaId");

                    b.Property<string>("Title");

                    b.HasKey("ColorId");

                    b.HasIndex("KalaId");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Toptin.Api.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArzeshKharid");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Desc");

                    b.Property<int>("KalaId");

                    b.Property<int>("KeyfiyatSakht");

                    b.Property<int>("Status");

                    b.Property<int>("Tarahi");

                    b.Property<string>("Title");

                    b.HasKey("CommentId");

                    b.HasIndex("KalaId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Toptin.Api.Models.Favorit", b =>
                {
                    b.Property<int>("FavoritId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Id");

                    b.Property<int>("KalaId");

                    b.HasKey("FavoritId");

                    b.HasIndex("Id");

                    b.HasIndex("KalaId");

                    b.ToTable("Favorit");
                });

            modelBuilder.Entity("Toptin.Api.Models.Kala", b =>
                {
                    b.Property<int>("KalaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Desc");

                    b.Property<string>("DescShort");

                    b.Property<string>("Garantee");

                    b.Property<int>("Hit");

                    b.Property<string>("Id");

                    b.Property<int>("Star");

                    b.Property<int>("StarNum");

                    b.Property<string>("Title");

                    b.Property<string>("TitleEn");

                    b.Property<int>("Type");

                    b.HasKey("KalaId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.ToTable("Kala");
                });

            modelBuilder.Entity("Toptin.Api.Models.KalaAttribute", b =>
                {
                    b.Property<int>("KalaAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeCategoryId");

                    b.Property<int>("KalaId");

                    b.Property<string>("Title");

                    b.Property<string>("Value");

                    b.HasKey("KalaAttributeId");

                    b.HasIndex("AttributeCategoryId");

                    b.HasIndex("KalaId");

                    b.ToTable("Attribute");
                });

            modelBuilder.Entity("Toptin.Api.Models.KalaPicture", b =>
                {
                    b.Property<int>("KalaPictureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KalaId");

                    b.Property<int>("PictureId");

                    b.HasKey("KalaPictureId");

                    b.HasIndex("KalaId");

                    b.HasIndex("PictureId");

                    b.ToTable("KalaPicture");
                });

            modelBuilder.Entity("Toptin.Api.Models.KalaRequest", b =>
                {
                    b.Property<int>("KalaRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Desc");

                    b.Property<string>("Id");

                    b.Property<int>("Num");

                    b.Property<int>("Price");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("KalaRequestId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Id");

                    b.ToTable("KalaRequest");
                });

            modelBuilder.Entity("Toptin.Api.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Text");

                    b.HasKey("LogId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Toptin.Api.Models.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Pic");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("PictureId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("Toptin.Api.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("KalaId");

                    b.Property<int>("ParentQuestionId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("QuestionId");

                    b.HasIndex("KalaId");

                    b.HasIndex("ParentQuestionId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Toptin.Api.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Id");

                    b.Property<int>("Price");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("RequestId");

                    b.HasIndex("Id");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Toptin.Api.Models.RequestDetail", b =>
                {
                    b.Property<int>("RequestDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KalaId");

                    b.Property<int>("Num");

                    b.Property<int>("Price");

                    b.Property<int?>("RequestId");

                    b.Property<int>("RequstId");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("RequestDetailId");

                    b.HasIndex("KalaId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestDetail");
                });

            modelBuilder.Entity("Toptin.Api.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Toptin.Api.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc");

                    b.Property<int>("Hit");

                    b.Property<string>("Id");

                    b.Property<int>("Star");

                    b.Property<int>("StarNum");

                    b.Property<string>("Title");

                    b.HasKey("StoreId");

                    b.HasIndex("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Toptin.Api.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KalaId");

                    b.Property<string>("Title");

                    b.HasKey("TagId");

                    b.HasIndex("KalaId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Toptin.Api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("SmsSentNumber");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Toptin.Api.Models.UserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("RoleId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Toptin.Api.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Toptin.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Toptin.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Toptin.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Toptin.Api.Models.Category", b =>
                {
                    b.HasOne("Toptin.Api.Models.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("Toptin.Api.Models.Color", b =>
                {
                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Toptin.Api.Models.Comment", b =>
                {
                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Toptin.Api.Models.Favorit", b =>
                {
                    b.HasOne("Toptin.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Toptin.Api.Models.Kala", b =>
                {
                    b.HasOne("Toptin.Api.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("Toptin.Api.Models.KalaAttribute", b =>
                {
                    b.HasOne("Toptin.Api.Models.AttributeCategory", "AttributeCategory")
                        .WithMany()
                        .HasForeignKey("AttributeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Toptin.Api.Models.KalaPicture", b =>
                {
                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Toptin.Api.Models.KalaRequest", b =>
                {
                    b.HasOne("Toptin.Api.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("Toptin.Api.Models.Question", b =>
                {
                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.Question", "ParentQuestion")
                        .WithMany("ParentQuestions")
                        .HasForeignKey("ParentQuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Toptin.Api.Models.Request", b =>
                {
                    b.HasOne("Toptin.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("Toptin.Api.Models.RequestDetail", b =>
                {
                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("Toptin.Api.Models.Store", b =>
                {
                    b.HasOne("Toptin.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id");
                });

            modelBuilder.Entity("Toptin.Api.Models.Tag", b =>
                {
                    b.HasOne("Toptin.Api.Models.Kala", "Kala")
                        .WithMany()
                        .HasForeignKey("KalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Toptin.Api.Models.UserRole", b =>
                {
                    b.HasOne("Toptin.Api.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Toptin.Api.Models.Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Toptin.Api.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
